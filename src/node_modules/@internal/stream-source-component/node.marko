import fetch from "make-fetch-happen";
import https from "https";
import path from "path";
import { getSource } from "../../../util/stream";
static const { ca } = https.globalAgent.options;
static const cachePath = path.resolve("node_modules/.cache/fetch");
static const strictSSL = process.env.NODE_TLS_REJECT_UNAUTHORIZED !== "0";
static function internalFetch(url, options) {
  return fetch(url, { ...options, ca, cachePath, strictSSL });
}
$ const request = async () => {
  const global = out.global;
  let origin;
  let incomingHeaders;

  if (global.platform) {
    const url = global.url;
    if (!url) {
      throw new Error(
        "Please assign $global.platform.url with WHATWG URL object compatible with @marko/run.",
      );
    }

    const request = global.request;
    if (!request || !request.headers) {
      throw new Error(
        "Please assign $global.platform.request with WHATWG request object compatible with @marko/run.",
      );
    }

    incomingHeaders = Object.fromEntries(request.headers);
    const forwardedProto = request.headers.get("x-forwarded-proto");
    const forwardedHost = request.headers.get("x-forwarded-host");
    origin =
      forwardedHost && forwardedProto
        ? `${forwardedProto}://${forwardedHost}`
        : url.origin;
  } else {
    const incomingMessage =
      (out.stream && (out.stream.req || out.stream.request)) ||
      out.global.req ||
      out.global.request;
    if (!incomingMessage) {
      throw new Error(
        "Could not get request from stream/global. Please assign out.global.req with proper request object.",
      );
    }

    incomingHeaders = incomingMessage.headers;
    const protocol =
      incomingHeaders["x-forwarded-proto"] || incomingMessage.protocol;
    const host = incomingHeaders["x-forwarded-host"] || incomingHeaders.host;
    origin = `${protocol}://${host}`;
  }

  const url = new URL(input.src, origin);
  const { cache } = input;
  const headers = {
    ...incomingHeaders,
    ...input.headers,
  };
  const res = await (input.fetch
    ? input.fetch(
        url,
        {
          cache,
          headers,
        },
        internalFetch,
      )
    : fetch(url, {
        cache,
        headers,
        ca,
        cachePath,
        strictSSL,
      }));

  if (!res.ok) throw new Error(res.statusText);

  return res;
};
$ const streamSource = getSource(input.name, out);

<div id=component.id data-src=input.src>
  $ out.bf("@_", component, true);
  <await(request()) client-reorder timeout=input.timeout>
    <@then|{ body }|>
      $ const iter = input.parser(body[Symbol.asyncIterator]());
      <await(streamSource.run(iter)) client-reorder>
        <@catch|err|>
          $ streamSource.close(err);
        </@catch>
      </await>
    </@then>
    <@catch|err|>
      $ streamSource.close(err);
    </@catch>
  </await>
  $ out.ef();
</div>
