import getWritableDOM from "writable-dom";
import {
  getSource,
  type StreamSource,
  type StreamWritable,
} from "../../../util/stream";

interface Input {
  slot: string;
  from: string;
  catch?: unknown;
  timeout?: number;
  loading?: unknown;
  cache?: RequestCache;
  headers?: Record<string, string>;
  noRefresh?: boolean;
}

interface State {
  loading: boolean;
  err: undefined | Error;
}

export = {
  onCreate() {
    const ssrEl = document.getElementById(this.id);
    let loading = true;
    if (ssrEl) {
      this.slotId = ssrEl.dataset.slot;
      loading = false;
    }

    this.state = {
      loading,
      err: undefined,
    };

    this.handleSrcChange = this.handleSrcChange.bind(this);
  },
  onInput(input: Input) {
    if (this.from !== input.from) {
      this.from = input.from;
      this.streamSource = getSource(input.from);
      if (!input.noRefresh) {
        this.streamSource.onInvalidate(this.handleSrcChange);
      }
    }
  },
  onMount() {
    this.onUpdate();
  },
  handleSrcChange(src: string) {
    this.curSrc = src;
    this.forceUpdate();
  },
  onDestroy() {
    this.slot?.end();
    this.streamSource.offInvalidate(this.handleSrcChange);
  },
  async onUpdate() {
    if (this.slotId === this.input.slot && this.prevSrc === this.curSrc) return;

    this.state.loading = true;
    this.state.err = undefined;
    this.slotId = this.input.slot;
    this.prevSrc = this.curSrc;

    let writable: ReturnType<typeof getWritableDOM> | undefined;
    let err: Error | undefined;

    try {
      this.slot = this.streamSource.slot(this.slotId);

      if (!this.slot) {
        return;
      }

      writable = getWritableDOM(
        this.el,
        // references the start of the preserved Marko fragment.
        this.el.lastChild!.previousSibling
      );

      // eslint-disable-next-line no-constant-condition
      while (true) {
        const { value, done } = await this.slot.next();
        if (done) break;
        writable.write(value);
      }

      await writable.close();
    } catch (_err) {
      err = _err as Error;
    }

    if (err && !this.input.catch) throw err;
    this.state.loading = false;
    this.state.err = err;
  },
} as {
  id: string;
  input: Input;
  state: State;
  el: HTMLDivElement;
  slotId: string | undefined;
  from: string | undefined;
  prevSrc: string | undefined;
  curSrc: string | undefined;
  slot: StreamWritable | undefined;
  streamSource: StreamSource;
  onInput(): any;
  onUpdate(): any;
  onCreate(): any;
  onMount(): any;
  onDestroy(): any;
  forceUpdate(): any;
  handleSrcChange(src: string): any;
};
